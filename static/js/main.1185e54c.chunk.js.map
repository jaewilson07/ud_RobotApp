{"version":3,"sources":["components/Card.jsx","components/CardArray.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","containers/App.js","action.js","constants.js","reducers.js","index.js"],"names":["Card","robot","username","email","name","className","src","alt","CardArray","robots_list","map","key","id","SearchBox","search_txt","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","console","log","Component","App","onRequestRobots","robots","searchField","onSearchChange","filteredRobots","filter","toLowerCase","includes","length","connect","searchRobots","requestRobots","isPending","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1185e54c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ robot }) => {\r\n  const { username, email, name } = robot;\r\n  return (\r\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${username}`} alt=\"RobotImage\" />\r\n      <h2>Name: {name}</h2>\r\n      <p>UserName : {username}</p>\r\n      <p>email : {email} </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardArray = ({ robots_list }) => {\r\n  return (\r\n    <div>\r\n      {robots_list.map((robot) => {\r\n        return <Card key={robot.id} robot={robot} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardArray;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ search_txt }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={search_txt}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: 'scroll',\r\n        border: '1px solid black',\r\n        height: '_500px',\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n    console.log(error, info);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Error</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CardArray from '../components/CardArray';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport { setSearchField, requestRobots } from '../action';\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange } = this.props;\n\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\"> RoboFriends</h1>\n        <SearchBox search_txt={onSearchChange} />\n\n        {!robots.length ? (\n          <h1>loading</h1>\n        ) : (\n          <Scroll>\n            <ErrorBoundary>\n              <CardArray robots_list={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((users) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  console.log(action.type);\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return (\r\n        // same as, with destructuring\r\n        // { ...state, searchField: action.payload };\r\n\r\n        Object.assign({}, state, { searchField: action.payload })\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: '',\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}